{
  "version": 3,
  "sources": ["../../v-clipboard/src/cache.ts", "../../v-clipboard/src/convert.ts", "../../v-clipboard/src/textarea.ts", "../../v-clipboard/src/clipboard.ts", "../../v-clipboard/src/plugin.ts", "dep:v-clipboard"],
  "sourcesContent": ["export class Cache {\n  private seed = 0\n  private data: Map<string, Function> = new Map()\n\n  private id() {\n    return Date.now().toString(26) + this.seed++\n  }\n\n  add(value: Function, id: string = this.id()) {\n    this.data.set(id, value)\n\n    return id\n  }\n\n  get(id: string) {\n    return this.data.get(id)\n  }\n\n  delete(id: string) {\n    this.delete(id)\n  }\n}\n", "const message = 'Failed to copy value to clipboard. Unknown type.'\n\nexport const Convert = {\n  asString(value: any): string {\n    if (value == null) {\n      console.warn('Clipboard input is empty')\n      return ''\n    }\n\n    if (typeof value !== 'string') {\n      try {\n        return JSON.stringify(value)\n      } catch (error) {\n        console.warn(message, error)\n\n        return ''\n      }\n    }\n\n    return value\n  }\n}\n", "const cssText = 'position:fixed; pointer-events:none; z-index:-9999; opacity:0;'\n\nexport const Textarea = {\n  createTextarea(value: string) {\n    const textarea = document.createElement('textarea')\n\n    textarea.addEventListener('focusin', (event) => {\n      event.stopPropagation()\n    })\n\n    textarea.value = value\n    textarea.setAttribute('readonly', '')\n    textarea.style.cssText = cssText\n\n    return textarea\n  }\n}\n", "import { Convert } from './convert'\nimport { Textarea } from './textarea'\n\nexport const Clipboard = {\n  /**\n   * Requests Navigator API persmission to clipboard.\n   */\n  async requestClipboardPermission() {\n    return navigator.permissions.query({\n      name: 'clipboard-write' as PermissionName\n    })\n  },\n  /**\n   * Writes to cliboard using Navigator API.\n   */\n  async writeClipboard(value: string) {\n    const permissions = await Clipboard.requestClipboardPermission()\n\n    if (permissions.state === 'granted') {\n      await navigator.clipboard.writeText(value)\n      return true\n    }\n\n    return false\n  },\n  /**\n   * Writes to clipboard using old-school execCommand('copy').\n   */\n  writeClipboardExecCommand(value: string) {\n    const textarea = Textarea.createTextarea(value)\n\n    document.body.appendChild(textarea)\n\n    if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\n      textarea.contentEditable = 'true'\n      textarea.readOnly = true\n\n      const range = document.createRange()\n\n      range.selectNodeContents(textarea)\n\n      const selection = window.getSelection()\n\n      if (selection) {\n        selection.removeAllRanges()\n        selection.addRange(range)\n        textarea.setSelectionRange(0, 999999)\n      }\n    } else {\n      textarea.select()\n    }\n\n    const result = document.execCommand('copy')\n    document.body.removeChild(textarea)\n\n    return result\n  },\n  /**\n   * Maes an attempt to copy data to the clipboard.\n   */\n  async copy(input: any) {\n    const data = typeof input === 'function' ? input() : input\n    const value = Convert.asString(data)\n\n    const copied = Clipboard.writeClipboardExecCommand(value)\n\n    if (copied) {\n      return true\n    }\n\n    await Clipboard.writeClipboard(value)\n  }\n}\n", "import { Directive, Plugin } from 'vue'\nimport { Cache } from './cache'\nimport { Clipboard } from './clipboard'\n\ntype ClipboardDirective = Function | string | object | null | undefined\n\nconst cache = new Cache()\n\nexport const ClipboardPlugin: Plugin = {\n  install(app) {\n    const context =\n      // @ts-ignore\n      app.version[0] === '3' ? app.config.globalProperties : app.prototype\n\n    context.$clipboard = Clipboard.copy\n\n    app.directive('clipboard', <Directive<HTMLElement, ClipboardDirective>>{\n      beforeMount(el, binding) {\n        const arg = binding.arg\n        const value = binding.value\n        const isFn = typeof value === 'function'\n\n        if (arg === 'error' && isFn) {\n          el.dataset.clipboardError = cache.add(value)\n          return\n        }\n\n        if (arg === 'error' && isFn) {\n          el.dataset.clipboardSuccess = cache.add(value)\n          return\n        }\n\n        const onClick = async (event: MouseEvent) => {\n          const success = await Clipboard.copy(value)\n\n          const callbackId = success\n            ? el.dataset.clipboardSuccess\n            : el.dataset.clipboardError\n\n          cache.get(callbackId!)?.({ value, event })\n        }\n\n        el.dataset.clipboardClick = cache.add(onClick)\n        el.addEventListener('click', onClick)\n      },\n\n      unmounted(el) {\n        const {\n          clipboardSuccessHandler,\n          clipboardErrorHandler,\n          clipboardClickHandler\n        } = el.dataset\n\n        if (clipboardSuccessHandler) {\n          cache.delete(clipboardSuccessHandler)\n        }\n\n        if (clipboardErrorHandler) {\n          cache.delete(clipboardErrorHandler)\n        }\n\n        if (clipboardClickHandler) {\n          const handler = cache.get(clipboardClickHandler)\n\n          if (handler) {\n            el.removeEventListener('click', handler as () => {})\n            cache.delete(clipboardClickHandler)\n          }\n        }\n      },\n      /**\n       * Vue 2 compatability\n       */\n      get bind() {\n        // @ts-ignore\n        return this.beforeMount\n      },\n\n      get unbind() {\n        // @ts-ignore\n        return this.unmounted\n      }\n    })\n  }\n}\n", "import d from \"./node_modules/v-clipboard/dist/v-clipboard.es.js\";export default d;\nexport * from \"./node_modules/v-clipboard/dist/v-clipboard.es.js\""],
  "mappings": "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",
  "names": ["Cache", "__publicField", "value", "id", "message", "Convert", "error", "cssText", "Textarea", "textarea", "event", "Clipboard", "range", "selection", "result", "input", "data", "cache", "ClipboardPlugin", "app", "context", "el", "binding", "arg", "isFn", "onClick", "_a", "callbackId", "clipboardSuccessHandler", "clipboardErrorHandler", "clipboardClickHandler", "handler"]
}
